import face_recognition
import cv2
import numpy as np
from espeak import espeak
import smtplib
from email.mime.multipart import MIMEMultipart  
from email.mime.base import MIMEBase  
from email.mime.text import MIMEText   
from email import encoders 

# Get a reference to webcam 
video_capture = cv2.VideoCapture(0) 

mohammad_pic = face_recognition.load_image_file("moe.jpg")
mohammad_face_encoding = face_recognition.face_encodings(mohammad_pic)[0]

# Add another person here

# Create arrays of known face encodings and their names
known_face_converts = [
    mohammad_face_encoding
]
known_face_labels = [
    "mohammad ahmad"
]

PIR_input = 29 #read PIR Output         
PIR_input
print("Movement Detected!")


# Initialize variables
face_positions = []
face_converts = []
face_labels = []
process_this_frame = True

while True:
    # Grab a single frame of video
    ret, frame = video_capture.read()

    # Resize frame of video to 1/4 size for faster face recognition processing
    small_frame = cv2.resize(frame, (0, 0), fx=0.25, fy=0.25)

    # Convert the image from BGR color (which OpenCV uses) to RGB color (which face_recognition uses)
    rgb_small_frame = small_frame[:, :, ::-1]

    # Only process every other frame of video to save time
    if process_this_frame:
        # Find all the faces and face encodings in the current frame of video
        face_positions = face_recognition.face_locations(rgb_small_frame)
        face_converts = face_recognition.face_encodings(rgb_small_frame, face_positions)

        face_labels = []
        for face_encoding in face_converts:
            # See if the face is a match for the known face
            matches = face_recognition.compare_faces(known_face_converts, face_encoding) 
            # Sending email with image
            def send_an_email_image():  
                toEmail = 'g00321094@gmail.com'      # Sending email to
                fromEmail = 'g00321094@gmail.com'          # Sending from
                subject = "Mohammad Ahmad is outside the Door"              # Subject/Message of Email
 
                msg = MIMEMultipart()  
                msg['Subject'] = subject  
                msg['From'] = fromEmail  
                msg['To'] = toEmail  
 
                part = MIMEBase('application', "octet-stream")  
                part.set_payload(open("moe.jpg", "rb").read())  
                encoders.encode_base64(part)  
                part.add_header('Content-Disposition', 'attachment; filename="image.jpg"')   # File name and format name
                msg.attach(part)  
 
                try:  
                   send = smtplib.SMTP('smtp.gmail.com', 587)  # Protocol
                   send.ehlo()  
                   send.starttls()  
                   send.ehlo()  
                   send.login(user = 'g00321094@gmail.com', password = 'gmit2020')  # User id & password 
                   send.sendmail(fromEmail, toEmail, msg.as_string())  
                   send.quit()
       
                except SMTPException as error:  
                    print ("Error")                # Exception
 
            send_an_email_image()
            # if face unkown, print unkown
            name = "Unknown"
            def send_an_email():  
                toEmail = 'g00321094@gmail.com'      # Sending email to
                fromEmail = 'g00321094@gmail.com'          # Sending from
                subject = "Unkown person outside the door"              # Subject/Message of Email
 
                msg = MIMEMultipart()  
                msg['Subject'] = subject  
                msg['From'] = fromEmail  
                msg['To'] = toEmail
                try:  
                   send = smtplib.SMTP('smtp.gmail.com', 587)  # Protocol
                   send.ehlo()  
                   send.starttls()  
                   send.ehlo()  
                   send.login(user = 'g00321094@gmail.com', password = 'gmit2020')  # User id & password 
                   send.sendmail(fromEmail, toEmail, msg.as_string())  
                   send.quit()
       
                except SMTPException as error:  
                    print ("Error")                # Exception
 
            send_an_email()
                        
            
          #  Or instead, use the known face with the smallest distance to the new face
            face_distances = face_recognition.face_distance(known_face_converts, face_encoding)
            best_match_index = np.argmin(face_distances)
            if matches[best_match_index]:
                name = known_face_labels[best_match_index]
                espeak.synth(name)
                

            face_labels.append(name)
            espeak.synth(name)

    process_this_frame = not process_this_frame


    # Display the results
    for (top, right, bottom, left), name in zip(face_positions, face_labels):
        # Scale back up face locations since the frame we detected in was scaled to 1/4 size
        top *= 4
        right *= 4
        bottom *= 4
        left *= 4

        # Draw a box around the face
        cv2.rectangle(frame, (left, top), (right, bottom), (0, 0, 255), 2)

        # Draw a label with a name below the face
        cv2.rectangle(frame, (left, bottom - 35), (right, bottom), (0, 0, 255), cv2.FILLED)
        font = cv2.FONT_HERSHEY_DUPLEX
        cv2.putText(frame, name, (left + 6, bottom - 6), font, 1.0, (255, 255, 255), 1)
        

    # Display the resulting image
    cv2.imshow('Video', frame)

    # Press 'q' on the keyboard to quit!
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release handle to the webcam
video_capture.release()
cv2.destroyAllWindows()